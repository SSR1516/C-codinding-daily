class Solution {
  public:
    // Function to find the maximum of each subarray of size k.
    vector<int> max_of_subarrays(int k, vector<int> &arr) {
        int n = arr.size();
        vector<int> result;
        deque<int> dq;  // Deque to store indices of array elements
        
        for (int i = 0; i < n; ++i) {
            // Remove elements that are out of this window
            if (!dq.empty() && dq.front() == i - k)
                dq.pop_front();
            
            // Remove elements that are smaller than the current element from the back
            while (!dq.empty() && arr[dq.back()] <= arr[i])
                dq.pop_back();
            
            // Add current element index to the back of the deque
            dq.push_back(i);
            
            // Starting from index k-1, we have full windows
            if (i >= k - 1)
                result.push_back(arr[dq.front()]);
        }
        
        return result;
    }
};
